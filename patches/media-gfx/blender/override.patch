diff --git a/intern/cycles/blender/addon/ui.py b/intern/cycles/blender/addon/ui.py
--- a/intern/cycles/blender/addon/ui.py
+++ b/intern/cycles/blender/addon/ui.py
@@ -348,13 +348,15 @@
         col = split.column()
         col.label(text="Material:")
         col.prop(rl, "material_override", text="")
-        col.separator()
-        col.prop(rl, "samples")
+        if rl.material_override is not None:
+            col.prop(rl, "layers_no_override", text="No Override on")
 
         col = split.column()
         col.prop(rl, "use_sky", "Use Environment")
         col.prop(rl, "use_solid", "Use Surfaces")
         col.prop(rl, "use_strand", "Use Hair")
+        col.separator()
+        col.prop(rl, "samples")
 
 
 class CyclesRender_PT_layer_passes(CyclesButtonsPanel, Panel):
diff --git a/intern/cycles/blender/blender_mesh.cpp b/intern/cycles/blender/blender_mesh.cpp
--- a/intern/cycles/blender/blender_mesh.cpp
+++ b/intern/cycles/blender/blender_mesh.cpp
@@ -605,9 +605,10 @@
 	/* find shader indices */
 	vector<uint> used_shaders;
 
+	uint object_layer = get_layer(b_ob.layers());
 	BL::Object::material_slots_iterator slot;
 	for(b_ob.material_slots.begin(slot); slot != b_ob.material_slots.end(); ++slot) {
-		if(material_override)
+		if(material_override && !(render_layer.no_override_layer & object_layer))
 			find_shader(material_override, used_shaders, scene->default_surface);
 		else
 			find_shader(slot->material(), used_shaders, scene->default_surface);
diff --git a/intern/cycles/blender/blender_sync.h b/intern/cycles/blender/blender_sync.h
--- a/intern/cycles/blender/blender_sync.h
+++ b/intern/cycles/blender/blender_sync.h
@@ -129,6 +129,7 @@
 		RenderLayerInfo()
 		: scene_layer(0), layer(0),
 		  holdout_layer(0), exclude_layer(0),
+		  no_override_layer(0),
 		  material_override(PointerRNA_NULL),
 		  use_background(true),
 		  use_surfaces(true),
@@ -143,6 +144,7 @@
 		uint layer;
 		uint holdout_layer;
 		uint exclude_layer;
+		uint no_override_layer;
 		BL::Material material_override;
 		bool use_background;
 		bool use_surfaces;
diff --git a/intern/cycles/blender/blender_sync.cpp b/intern/cycles/blender/blender_sync.cpp
--- a/intern/cycles/blender/blender_sync.cpp
+++ b/intern/cycles/blender/blender_sync.cpp
@@ -307,6 +307,7 @@
 			render_layer.scene_layer = get_layer(b_v3d.layers(), b_v3d.layers_local_view(), render_layer.use_localview);
 			render_layer.layer = render_layer.scene_layer;
 			render_layer.exclude_layer = 0;
+			render_layer.no_override_layer = 0;
 			render_layer.holdout_layer = 0;
 			render_layer.material_override = PointerRNA_NULL;
 			render_layer.use_background = true;
@@ -333,6 +334,7 @@
 
 			render_layer.holdout_layer = get_layer(b_rlay->layers_zmask());
 			render_layer.exclude_layer = get_layer(b_rlay->layers_exclude());
+			render_layer.no_override_layer = get_layer(b_rlay->layers_no_override());
 
 			render_layer.scene_layer = scene_layers & ~render_layer.exclude_layer;
 			render_layer.scene_layer |= render_layer.exclude_layer & render_layer.holdout_layer;
diff --git a/source/blender/makesdna/DNA_scene_types.h b/source/blender/makesdna/DNA_scene_types.h
--- a/source/blender/makesdna/DNA_scene_types.h
+++ b/source/blender/makesdna/DNA_scene_types.h
@@ -185,7 +185,9 @@
 	unsigned int lay;		  /* scene->lay itself has priority over this */
 	unsigned int lay_zmask;	  /* has to be after lay, this is for Z-masking */
 	unsigned int lay_exclude; /* not used by internal, exclude */
+	unsigned int lay_no_override; /* not used by internal, layers without override material */
 	int layflag;
+	int pad1;
 	
 	int passflag;			/* pass_xor has to be after passflag */
 	int pass_xor;
diff --git a/source/blender/makesrna/intern/rna_scene.c b/source/blender/makesrna/intern/rna_scene.c
--- a/source/blender/makesrna/intern/rna_scene.c
+++ b/source/blender/makesrna/intern/rna_scene.c
@@ -2720,6 +2720,13 @@
 	if (scene) RNA_def_property_update(prop, NC_SCENE | ND_RENDER_OPTIONS, "rna_Scene_glsl_update");
 	else RNA_def_property_clear_flag(prop, PROP_EDITABLE);
 
+	prop = RNA_def_property(srna, "layers_no_override", PROP_BOOLEAN, PROP_LAYER);
+	RNA_def_property_boolean_sdna(prop, NULL, "lay_no_override", 1);
+	RNA_def_property_array(prop, 20);
+	RNA_def_property_ui_text(prop, "No Override Layers", "Objects on these layers aren't influenced by the material override");
+	if (scene) RNA_def_property_update(prop, NC_SCENE | ND_RENDER_OPTIONS, "rna_Scene_glsl_update");
+	else RNA_def_property_clear_flag(prop, PROP_EDITABLE);
+
 	if (scene) {
 		prop = RNA_def_property(srna, "samples", PROP_INT, PROP_UNSIGNED);
 		RNA_def_property_ui_text(prop, "Samples", "Override number of render samples for this render layer, "
diff --git a/source/blender/render/extern/include/RE_pipeline.h b/source/blender/render/extern/include/RE_pipeline.h
--- a/source/blender/render/extern/include/RE_pipeline.h
+++ b/source/blender/render/extern/include/RE_pipeline.h
@@ -109,7 +109,7 @@
 	
 	/* copy of RenderData */
 	char name[RE_MAXNAME];
-	unsigned int lay, lay_zmask, lay_exclude;
+	unsigned int lay, lay_zmask, lay_exclude, lay_no_override;
 	int layflag, passflag, pass_xor;
 	
 	struct Material *mat_override;
diff --git a/source/blender/render/intern/source/render_result.c b/source/blender/render/intern/source/render_result.c
--- a/source/blender/render/intern/source/render_result.c
+++ b/source/blender/render/intern/source/render_result.c
@@ -612,6 +612,7 @@
 		rl->lay = srl->lay;
 		rl->lay_zmask = srl->lay_zmask;
 		rl->lay_exclude = srl->lay_exclude;
+		rl->lay_no_override = srl->lay_no_override;
 		rl->layflag = srl->layflag;
 		rl->passflag = srl->passflag; /* for debugging: srl->passflag | SCE_PASS_RAYHITS; */
 		rl->pass_xor = srl->pass_xor;

